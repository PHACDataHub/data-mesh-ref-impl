{
    "name": "fed_request_sink_connector",
    "config": {
        "_comment": "Sink configuration for Federated Analytics Requests",
        "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://schema-registry:8081",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter.schema.registry.url": "http://schema-registry:8081",
        "errors.retry.timeout": "-1",
        "errors.retry.delay.max.ms": "1000",
        "errors.tolerance": "all",
        "errors.log.enable": true,
        "errors.log.include.messages": true,
        "neo4j.server.uri": "bolt://neo4j:7687",
        "neo4j.authentication.basic.username": "neo4j",
        "neo4j.authentication.basic.password": "phac@2023",
        "neo4j.encryption.enabled": false,
        "topics": "fed_request_vaccination_record,fed_request_zip_immunization,fed_request_top_k_immunization",
        "neo4j.topic.cypher.fed_request_vaccination_record": "WITH event, 'MATCH (immunization:Immunization) WITH immunization ORDER BY immunization.date ASC RETURN immunization, \"' + event.request_id + '\" AS request_id' AS batch_producer, 'WITH immunization, request_id MATCH (organization:Organization)-[]-(encounter:Encounter)-[:IMMUNIZATION_OF_ENCOUNTER]-(immunization)-[:IMMUNIZATION_OF_PATIENT]-(patient:Patient) WITH immunization, organization, encounter, patient, request_id CREATE (record:VaccinationRecord) SET record.request_id = request_id, record.immunization_date = TOSTRING(immunization.date), record.immunization_code = immunization.code, record.immunization_description = immunization.description, record.organization_name = organization.name, record.organization_zip = organization.zip, record.encounter_class = encounter.encounter_class, record.encounter_code = encounter.code, record.encounter_description = encounter.description, record.patient_id = patient.patient_id, record.patient_address = patient.address, record.patient_age = 2023 - patient.birth_date.year, record.patient_zip = patient.zip, record.patient_gender = patient.gender, record.patient_race = patient.race, record.patient_ethnicity = patient.ethnicity, record.timestamp = apoc.date.currentTimestamp()' AS batch_runner WITH batch_producer, batch_runner CALL apoc.periodic.iterate(batch_producer, batch_runner, {batchSize:10000, parallel:true}) YIELD total RETURN total",
        "neo4j.topic.cypher.fed_request_zip_immunization": "WITH event, 'MATCH (patient:Patient)-[]-(immunization:Immunization) WHERE ' + (CASE WHEN event.city IS NOT NULL THEN 'patient.city = \"' + event.city + '\" ' ELSE 'TRUE ' END) + 'RETURN DISTINCT(patient.zip) AS zip, patient.city AS city, \"' + event.request_id + '\" AS request_id, COUNT(immunization) AS immunization_count' AS batch_producer, 'WITH city, zip, request_id, immunization_count CREATE (record:ZipImmunization) SET record.request_id = request_id, record.city = city, record.zip = zip, record.immunization_count = immunization_count, record.timestamp = apoc.date.currentTimestamp()' AS batch_runner WITH batch_producer, batch_runner CALL apoc.periodic.iterate(batch_producer, batch_runner, {batchSize:10000, parallel:true}) YIELD total RETURN total",
        "neo4j.topic.cypher.fed_request_top_k_immunization": "WITH event, 'MATCH (immunization:Immunization) WITH DISTINCT(immunization.code) AS code, COUNT(immunization) AS count ORDER BY count DESC LIMIT ' + (CASE WHEN event.k IS NOT NULL THEN TOSTRING(event.k) + ' ' ELSE '5 ' END) + 'WITH COLLECT(code) AS codes MATCH (patient:Patient)-[]-(immunization:Immunization) WHERE immunization.code IN codes RETURN patient.zip AS zip, immunization.code AS code, COUNT(immunization) AS count, \"' + event.request_id + '\" AS request_id' AS batch_producer, 'WITH zip, code, count, request_id CREATE (record:TopKImmunization) SET record.request_id = request_id, record.zip = zip, record.code = code, record.count = count, record.timestamp = apoc.date.currentTimestamp()' AS batch_runner WITH batch_producer, batch_runner CALL apoc.periodic.iterate(batch_producer, batch_runner, {batchSize:10000, parallel:true}) YIELD total RETURN total"
    }
}
