{
    "name": "event_sink_connector_1",
    "config": {
        "_comment": "Sink configuration for EHR events: organizations,patients,payers,providers",
        "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://schema-registry:8081",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter.schema.registry.url": "http://schema-registry:8081",
        "errors.retry.timeout": "-1",
        "errors.retry.delay.max.ms": "1000",
        "errors.tolerance": "all",
        "errors.log.enable": true,
        "errors.log.include.messages": true,
        "neo4j.server.uri": "bolt://neo4j:7687",
        "neo4j.authentication.basic.username": "neo4j",
        "neo4j.authentication.basic.password": "phac@2023",
        "tasks.max": 4,
        "neo4j.batch.size": 1000000,
        "neo4j.batch.parallelize": true,
        "neo4j.encryption.enabled": false,
        "topics": "organizations,patients,payers,providers",
        "neo4j.topic.cypher.organizations":"MERGE (n:Organization {organization_id: event.organization_id}) SET n.name = event.name, n.address = event.address, n.city = event.city, n.state = event.state, n.zip = event.zip, n.location = POINT({latitude: event.lat, longitude: event.lon}), n.phone = event.phone, n.revenue = event.revenue, n.utilization = event.utilization",
        "neo4j.topic.cypher.patients":"MERGE (n:Patient {patient_id: event.patient_id}) SET n.birth_date = DATE(event.birth_date), n.death_date = DATE(event.death_date), n.ssn = event.ssn, n.drivers = event.drivers, n.passport = event.passport, n.prefix = event.prefix, n.first = event.first, n.last = event.last, n.suffix = event.suffix, n.maiden = event.maiden, n.marital = event.marital, n.race = event.race, n.ethnicity = event.ethnicity, n.gender = event.gender, n.birth_place = event.birth_place, n.address = event.address, n.city = event.city, n.county = event.county, n.state = n.state, n.fips = event.fips, n.zip = event.zip, n.location = POINT({latitude: event.lat, longitude: event.lon}), n.healthcare_expenses = event.healthcare_expenses, n.healthcare_coverage = event.healthcare_coverage, n.income = event.income",
        "neo4j.topic.cypher.payers":"MERGE (n:Payer {payer_id: event.payer_id}) SET n.name = event.name, n.ownership = event.ownership, n.address = event.address, n.city = event.city, n.state_headquartered = event.state_headquartered, n.zip = event.zip, n.phone = event.phone, n.amount_covered = event.amount_covered, n.amount_uncovered = event.amount_uncovered, n.revenue = event.revenue, n.covered_encounters = event.covered_encounters, n.uncovered_encounters = event.uncovered_encounters, n.covered_medications = event.covered_medications, n.uncovered_medications = event.uncovered_medications, n.covered_procedures = event.covered_procedures, n.uncovered_procedures = event.uncovered_procedures, n.covered_immunizations = event.covered_immunizations, n.uncovered_immunizations = event.uncovered_immunizations, n.unique_customers = event.unique_customers, n.qols_avg = event.qols_avg, n.member_months = event.member_months",
        "neo4j.topic.cypher.providers":"MERGE (n:Provider {provider_id: event.provider_id}) SET n.name = event.name, n.gender = event.gender, n.speciality = event.speciality, n.address = event.address, n.city = event.city, n.state = event.state, n.zip = event.zip, n.location = POINT({latitude: event.lat, longitude: event.lon}), n.encounters = event.encounters, n.procedures = event.procedures WITH n, event FOREACH (dummy IN CASE WHEN event.organization_id IS NOT NULL THEN [1] ELSE [] END | MERGE (organization:Organization {organization_id: event.organization_id}) MERGE (n)-[:PROVIDER_OF_ORGANIZATION]->(organization) )"
    }
}
