{
    "name": "far_sink_connectors",
    "config": {
        "_comment": "Sink configuration for Federated Analytics Requests",
        "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://schema-registry:8081",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter.schema.registry.url": "http://schema-registry:8081",
        "errors.retry.timeout": "-1",
        "errors.retry.delay.max.ms": "1000",
        "errors.tolerance": "all",
        "errors.log.enable": true,
        "errors.log.include.messages": true,
        "neo4j.server.uri": "bolt://neo4j:7687",
        "neo4j.authentication.basic.username": "neo4j",
        "neo4j.authentication.basic.password": "phac@2023",
        "neo4j.encryption.enabled": false,
        "topics": "far_1,far_2,far_3,far_4,far_5,far_6,far_7,far_8,far_9",
        "neo4j.topic.cypher.far_1": "WITH event.request_id AS request_id, SPLIT(event.covid_cvx_list, ',') AS covid_cvx_list, DATE(event.start_date) AS start_date, event.period_length AS period_length, event.number_of_periods AS number_of_periods, event.pt_list AS pt WITH request_id, pt, covid_cvx_list, start_date, period_length, number_of_periods UNWIND RANGE(0, number_of_periods -1) AS period WITH request_id, pt, covid_cvx_list, start_date + DURATION({months: period * period_length}) AS period_start, start_date + DURATION({months: (period + 1) * period_length}) AS period_end OPTIONAL MATCH (patient)-[]-(immunization:Immunization) WHERE immunization.code IN covid_cvx_list AND DATE(immunization.date) >= period_start AND DATE(immunization.date) <= period_end WITH DISTINCT(patient) AS patient, request_id, pt, period_start, period_end, COUNT(immunization) AS immunization_count WITH DISTINCT(patient.zip) AS patient_zip, request_id, pt, period_start, period_end, CASE WHEN immunization_count >= 2 THEN 'Fully vaccinated' WHEN immunization_count = 1 THEN 'One-dosed' ELSE 'Unvaccinated' END AS patient_status, COUNT(*) AS status_count WITH request_id, pt, period_start, period_end, patient_zip, patient_status, status_count MATCH (patient:Patient {zip: patient_zip}) WITH request_id, pt, period_start, period_end, patient_zip, patient_status, status_count, COUNT(patient) AS patient_count WITH request_id, pt, period_start, period_end, patient_zip, patient_status, status_count, patient_count, ROUND(status_count*10000.0 / patient_count)/100.0 AS status_percent CREATE (n:FAS_1) SET n.request_id = request_id, n.pt = pt, n.start_date = period_start, n.end_date = period_end, n.patient_zip = patient_zip, n.patient_count = patient_count, n.patient_status = patient_status, n.status_count = status_count, n.status_percent = status_percent, n.timestamp = apoc.date.currentTimestamp()",
        "neo4j.topic.cypher.far_2":"WITH event.request_id AS request_id, apoc.convert.fromJsonMap(event.cvx_maps) AS cvx_maps, event.pt_list AS pt WITH request_id, pt, cvx_maps MATCH (patient:Patient) WHERE patient.birth_date + DURATION({months: 48}) < DATE() AND patient.death_date IS NULL WITH patient, request_id, pt, cvx_maps OPTIONAL MATCH (patient)-[]-(immunization:Immunization) WHERE immunization.code IN KEYS(cvx_maps) AND patient.birth_date + DURATION({months: apoc.map.get(cvx_maps, immunization.code)}) > DATE(immunization.date) WITH DISTINCT(patient) AS patient, request_id, pt, cvx_maps, COLLECT(DISTINCT(immunization.code)) AS cvx_codes WITH patient, request_id, pt, apoc.coll.disjunction(cvx_codes, KEYS(cvx_maps)) AS missing_codes WITH DISTINCT(patient.zip) AS patient_zip, request_id, pt, COUNT(patient) AS patient_count, COLLECT(missing_codes) AS list_of_missing_codes WITH request_id, pt, patient_zip, patient_count, apoc.convert.toSortedJsonMap(apoc.coll.frequenciesAsMap(apoc.coll.flatten(list_of_missing_codes))) AS missing_doses WITH request_id, pt, patient_zip, patient_count, missing_doses CREATE (n:FAS_2) SET n.request_id = request_id, n.pt = pt, n.patient_zip = patient_zip, n.patient_count = patient_count, n.missing_doses = missing_doses, n.timestamp = apoc.date.currentTimestamp()",
        "neo4j.topic.cypher.far_3":"WITH event.request_id AS request_id, SPLIT(event.cvx_list, ',') AS cvx_list, event.pt_list AS pt WITH request_id, pt, cvx_list MATCH (patient:Patient)-[]-(immunization:Immunization)-[]-(:Encounter)-[]-(organization:Organization) WHERE immunization.code IN cvx_list WITH request_id, pt, patient.zip AS zip, POINT.DISTANCE(patient.location, organization.location)/1000 AS distance, organization.name AS organization WITH DISTINCT([zip, organization]) AS zip_org, request_id, pt, ROUND(SUM(distance)/COUNT(distance)) AS average_distance WITH request_id, pt, zip_org[0] AS patient_zip, zip_org[1] AS organization_name, average_distance CREATE (n:FAS_3) SET n.request_id = request_id, n.pt = pt, n.patient_zip = patient_zip, n.organization_name = organization_name, n.average_distance = average_distance, n.timestamp = apoc.date.currentTimestamp()",
        "neo4j.topic.cypher.far_4":"WITH event.request_id AS request_id, SPLIT(event.cvx_list, ',') AS cvx_list, event.pt_list AS pt WITH request_id, pt, cvx_list MATCH (patient:Patient)-[]-(immunization:Immunization)-[]-(:Encounter)-[]-(organization:Organization) WHERE immunization.code IN cvx_list WITH DISTINCT([patient.zip, organization.name]) AS zip_org, request_id, pt, COUNT(*) AS vaccination_count WITH request_id, pt, zip_org[0] AS patient_zip, zip_org[1] AS organization_name, vaccination_count CREATE (n:FAS_4) SET n.request_id = request_id, n.pt = pt, n.patient_zip = patient_zip, n.organization_name = organization_name, n.vaccination_count = vaccination_count, n.timestamp = apoc.date.currentTimestamp()",
        "neo4j.topic.cypher.far_5":"WITH event CALL apoc.periodic.iterate(' WITH $event.request_id AS request_id, $event.pt_list AS pt MATCH (immunization:Immunization) RETURN immunization, request_id, pt ORDER BY immunization.date ASC ',' WITH immunization, request_id, pt MATCH (organization:Organization)-[]-(encounter:Encounter)-[:IMMUNIZATION_OF_ENCOUNTER]-(immunization)-[:IMMUNIZATION_OF_PATIENT]-(patient:Patient) WITH immunization, organization, encounter, patient, request_id, pt CREATE (n:FAS_5) SET n.request_id = request_id, n.pt = pt, n.immunization_date = TOSTRING(immunization.date), n.immunization_code = immunization.code, n.immunization_description = immunization.description, n.organization_name = organization.name, n.organization_zip = organization.zip, n.encounter_class = encounter.encounter_class, n.encounter_code = encounter.code, n.encounter_description = encounter.description, n.patient_id = patient.patient_id, n.patient_address = patient.address, n.patient_birth_date = TOSTRING(patient.birth_date), n.patient_alive = CASE WHEN patient.death_date IS NULL THEN TRUE ELSE FALSE END, n.patient_zip = patient.zip, n.patient_gender = patient.gender, n.patient_race = patient.race, n.patient_ethnicity = patient.ethnicity, n.timestamp = apoc.date.currentTimestamp() ', {params: {event: event}, batchSize:10000, parallel:true}) YIELD total RETURN total",
        "neo4j.topic.cypher.far_6":"WITH event.request_id AS request_id, event.pt_list AS pt WITH request_id, pt MATCH (condition:Condition) WHERE NOT(condition.code IN ['314529007', '160903007', '160904001']) WITH DISTINCT(condition.description) AS condition_description, request_id, pt, COUNT(*) AS condition_count CREATE (n:FAS_6) SET n.request_id = request_id, n.pt = pt, n.condition_description = condition_description, n.condition_count = condition_count, n.timestamp = apoc.date.currentTimestamp()",
        "neo4j.topic.cypher.far_7":"WITH event.request_id AS request_id, event.pt_list AS pt WITH request_id, pt MATCH (medication:Medication) WHERE SIZE(medication.reason_description) > 0 WITH DISTINCT(medication.reason_description) AS medication_reason_description, request_id, pt, COUNT(*) AS medication_reason_count CREATE (n:FAS_7) SET n.request_id = request_id, n.pt = pt, n.medication_reason_description = medication_reason_description, n.medication_reason_count = medication_reason_count, n.timestamp = apoc.date.currentTimestamp()",
        "neo4j.topic.cypher.far_8":"WITH event.request_id AS request_id, event.pt_list AS pt WITH request_id, pt MATCH (procedure:Procedure) WHERE SIZE(procedure.description)> 0 WITH DISTINCT(procedure.description) AS procedure_description, request_id, pt, COUNT(*) AS procedure_count CREATE (n:FAS_8) SET n.request_id = request_id, n.pt = pt, n.procedure_description = procedure_description, n.procedure_count = procedure_count, n.timestamp = apoc.date.currentTimestamp()",
        "neo4j.topic.cypher.far_9":"WITH event CALL apoc.periodic.iterate(' WITH $event.request_id AS request_id, apoc.convert.fromJsonMap($event.cvx_maps) AS cvx_maps, $event.pt_list AS pt MATCH (patient:Patient) WHERE patient.birth_date + DURATION({months: 48}) < DATE() AND patient.death_date IS NULL WITH patient, request_id, pt, cvx_maps OPTIONAL MATCH (patient)-[]-(immunization:Immunization) WHERE immunization.code IN KEYS(cvx_maps) AND patient.birth_date + DURATION({months: apoc.map.get(cvx_maps, immunization.code)}) > DATE(immunization.date) WITH DISTINCT(patient) AS patient, request_id, pt, cvx_maps, COLLECT(DISTINCT(immunization.code)) AS cvx_codes WITH patient, request_id, pt, apoc.coll.disjunction(cvx_codes, KEYS(cvx_maps)) AS missing_codes RETURN DISTINCT(patient.zip) AS patient_zip, request_id, pt, COUNT(patient) AS patient_count, COLLECT(missing_codes) AS list_of_missing_codes ',' WITH request_id, pt, patient_zip, patient_count, apoc.coll.toSet(apoc.coll.flatten(list_of_missing_codes)) AS missing_doses WITH request_id, pt, patient_zip, patient_count, missing_doses OPTIONAL MATCH (patient)-[]-(:Immunization)-[]-(:Encounter)-[]-(organization:Organization) WHERE patient.zip = patient_zip WITH request_id, pt, patient_zip, patient_count, missing_doses, COLLECT(DISTINCT(organization)) AS organizations WITH request_id, pt, patient_zip, patient_count, missing_doses, organizations OPTIONAL MATCH (immunization:Immunization)-[]-(:Encounter)-[]-(organization:Organization) WHERE immunization.code IN missing_doses AND organization IN organizations WITH request_id, pt, patient_zip, patient_count, missing_doses, COLLECT(DISTINCT(organization.name)) AS organization_list CREATE (n:FAS_9) SET n.request_id = request_id, n.pt = pt, n.patient_zip = patient_zip, n.patient_count = patient_count, n.missing_doses = CASE WHEN SIZE(missing_doses) > 0 THEN apoc.text.join(apoc.coll.sort(missing_doses),\",\") ELSE \"\" END, n.organization_list = CASE WHEN SIZE(organization_list) > 0 THEN apoc.text.join(apoc.coll.sort(organization_list),\",\") ELSE \"\" END, n.timestamp = apoc.date.currentTimestamp() ', {params: {event: event}, batchSize:100, parallel:true}) YIELD total RETURN total"
    }
}
