{
  "title": "Movie Recommendations",
  "version": "2.2",
  "settings": {
    "pagenumber": 0,
    "editable": true,
    "fullscreenEnabled": false,
    "parameters": {}
  },
  "pages": [
    {
      "title": "Movie time!",
      "reports": [
        {
          "title": "Auto-recommended movies",
          "query": "MATCH (n:MovieNews)\nWITH n, apoc.convert.fromJsonList(n.classified_labels)[0] AS class, apoc.convert.fromJsonList(n.category) AS categories\n    WHERE class['name'] = 'movie' AND 'Movies' IN categories\nWITH n, categories, apoc.coll.union([e IN apoc.convert.fromJsonList(n.named_entities) | e['word']], []) AS named_entities\nWITH n, categories, apoc.coll.subtract(apoc.coll.union([apoc.convert.fromJsonMap(n.question_answer)['answer']] + categories, named_entities), ['Movies']) AS named_entities\nWITH n, named_entities\n    MATCH (t:Title)\n        WHERE t.primaryTitle IN named_entities AND NOT(t.titleType IN [\"tvEpisode\", \"tvSeries\", \"tvMiniSeries\", \"tvMovie\", \"videoGame\", \"video\"])\nWITH n, t, named_entities\n    MATCH (t)-[:CREW_IN]-(p:Person)\nWITH DISTINCT(t) AS t, named_entities, COLLECT(DISTINCT(p.primaryName)) AS persons\n    WHERE SIZE(apoc.coll.intersection(named_entities, persons)) > 0\nWITH t\n    OPTIONAL MATCH (t)-[:CREW_IN {category: \"director\"}]-(d:Person)\n    OPTIONAL MATCH (t)-[r:CREW_IN]-(a:Person)\n\t\tWHERE r.category IN ['actor', 'actress']\nWITH DISTINCT(t) AS t, COLLECT(DISTINCT(d.primaryName)) AS directors, COLLECT(DISTINCT(a.primaryName)) AS crews\nWITH t.primaryTitle AS title, t.titleType AS type, t.startYear As startYear, directors, crews,\n    CASE WHEN t.averageRating IS NULL THEN '-' ELSE t.averageRating END AS rating \n\tORDER BY rating DESC LIMIT 10\nRETURN title, type, startYear, rating, directors, crews",
          "width": 12,
          "height": 2,
          "x": 0,
          "y": 2,
          "type": "table",
          "selection": {},
          "settings": {
            "nodePositions": {},
            "allowDownload": true,
            "columnWidths": "[20,5,5,5,20,40]"
          },
          "refreshRate": 60
        },
        {
          "title": "Human-recommended movies",
          "query": "MATCH (n:MovieNews)\n\tWHERE n.is_movie = true\nWITH n, apoc.convert.fromJsonList(n.classified_labels)[0] AS class, apoc.convert.fromJsonList(n.category) AS categories\n    WHERE class['name'] = 'movie' AND 'Movies' IN categories\nWITH n, categories, apoc.coll.union([e IN apoc.convert.fromJsonList(n.named_entities) | e['word']], []) AS named_entities\nWITH n, categories, apoc.coll.subtract(apoc.coll.union([apoc.convert.fromJsonMap(n.question_answer)['answer']] + categories, named_entities), ['Movies']) AS named_entities\nWITH n, named_entities\n    MATCH (t:Title)\n        WHERE t.primaryTitle IN named_entities AND NOT(t.titleType IN [\"tvEpisode\", \"tvSeries\", \"tvMiniSeries\", \"videoGame\", \"video\"])\nWITH n, t, named_entities\n    MATCH (t)-[:CREW_IN]-(p:Person)\nWITH DISTINCT(t) AS t, named_entities, COLLECT(DISTINCT(p.primaryName)) AS persons\n    WHERE SIZE(apoc.coll.intersection(named_entities, persons)) > 0\nWITH t\n    OPTIONAL MATCH (t)-[:CREW_IN {category: \"director\"}]-(d:Person)\n    OPTIONAL MATCH (t)-[r:CREW_IN]-(a:Person)\n\t\tWHERE r.category IN ['actor', 'actress']\nWITH DISTINCT(t) AS t, COLLECT(DISTINCT(d.primaryName)) AS directors, COLLECT(DISTINCT(a.primaryName)) AS crews\nWITH t.primaryTitle AS title, t.titleType AS type, t.startYear As startYear, directors, crews,\n    CASE WHEN t.averageRating IS NULL THEN '-' ELSE t.averageRating END AS rating \n\tORDER BY rating DESC LIMIT 10\nRETURN title, type, startYear, rating, directors, crews",
          "width": 12,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "columnWidths": "[20,5,5,5,20,40]",
            "allowDownload": true
          },
          "refreshRate": 60
        }
      ]
    },
    {
      "title": "All news from Screen Rant",
      "reports": [
        {
          "title": "All news",
          "query": "MATCH (n:MovieNews) \n    WHERE apoc.convert.fromJsonList(n.classified_labels)[0]['name'] = 'movie'\nRETURN n.link, n.title, n.description, n.content;\n\n",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "nodePositions": {},
            "allowDownload": true
          },
          "refreshRate": 60
        }
      ]
    },
    {
      "title": "News about movies",
      "reports": [
        {
          "title": "All unclassified news items",
          "query": "MATCH (n:MovieNews) \n    WHERE apoc.convert.fromJsonList(n.classified_labels)[0]['name'] = 'movie'\nRETURN apoc.convert.fromJsonMap(n.question_answer)['answer'] AS movie, n.sentiment_score AS sentiment_score, n.summary_text AS summary;",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "allowDownload": true,
            "columnWidths": "[30,15,110]",
            "description": "The list of current Screenrant news items from RSS feed"
          },
          "refreshRate": 60
        }
      ]
    },
    {
      "title": "Movies & Casts",
      "reports": [
        {
          "title": "Recommended movies and their casts",
          "query": "MATCH (n:MovieNews)\nWITH n, apoc.convert.fromJsonList(n.classified_labels)[0] AS class, apoc.convert.fromJsonList(n.category) AS categories\n    WHERE class['name'] = 'movie' AND 'Movies' IN categories\nWITH n, categories, apoc.coll.union([e IN apoc.convert.fromJsonList(n.named_entities) | e['word']], []) AS named_entities\nWITH n, categories, apoc.coll.subtract(apoc.coll.union([apoc.convert.fromJsonMap(n.question_answer)['answer']] + categories, named_entities), ['Movies']) AS named_entities\nWITH n, named_entities\n    MATCH (t:Title)\n        WHERE t.primaryTitle IN named_entities AND NOT(t.titleType IN [\"tvEpisode\", \"tvSeries\", \"tvMiniSeries\", \"tvMovie\", \"videoGame\", \"video\"])\nWITH n, t, named_entities\n    MATCH (t)-[:CREW_IN]-(p:Person)\nWITH DISTINCT(t) AS t, named_entities, COLLECT(DISTINCT(p.primaryName)) AS persons\n    WHERE SIZE(apoc.coll.intersection(named_entities, persons)) > 0\nWITH t\n    OPTIONAL MATCH (t)-[r:CREW_IN]-(p)\nRETURN t, r, p",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "graph",
          "selection": {
            "Title": "primaryTitle",
            "Person": "primaryName"
          },
          "settings": {
            "nodePositions": {},
            "defaultNodeSize": 5,
            "layout": "force-directed"
          },
          "refreshRate": 60
        }
      ]
    },
    {
      "title": "Single Data Lineage",
      "reports": [
        {
          "title": "Single Movie Data Lineage",
          "query": "MATCH (n:MovieNews) \n\tWHERE n.timestamp_sm IS NOT NULL\n\nWITH n LIMIT 1\n\nWITH n, \n\tdatetime({epochMillis: n.timestamp_tc*1000}) AS processing_time,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tROUND((apoc.convert.fromJsonList(n.news_label_list)[0]['score'])*1000)/1000 AS classification_score\n\tCALL apoc.create.vNode(\n\t\t['News'], {name: n.title, time: n.pub_date}\n\t) YIELD node AS news\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Text_Classification'], \n\t\t{label: classification_label, score: classification_score, when: processing_time}\n\t) YIELD node AS text_classification\n\tCALL apoc.create.vRelationship(\n\t\tnews, 'Text_Classifying', {}, text_classification\n\t) YIELD rel AS new_to_text_classification\n\t\nWITH n, news, text_classification, new_to_text_classification,\n\tdatetime({epochMillis: n.timestamp_qa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Question_Answering'],\n\t\t{movie: n.mentioned_movie, score: ROUND(n.mentioned_score*1000)/1000, when: processing_time}\n\t) YIELD node AS question_answering\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Question_Answering', {}, question_answering\n\t) YIELD rel AS text_classification_to_question_answering\n\t\nWITH n, news, text_classification, new_to_text_classification,\n\tquestion_answering, text_classification_to_question_answering,\n\tdatetime({epochMillis: n.timestamp_sa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Sentiment_Analysis'],\n\t\t{score: ROUND(n.sentiment_score*1000)/1000, when: processing_time}\n\t) YIELD node AS sentiment_analysis\n\tCALL apoc.create.vRelationship(\n\t\tquestion_answering, 'Sentiment_Analysis', {}, sentiment_analysis\n\t) YIELD rel AS question_answering_to_sentiment_analysis\n\nWITH n, news, text_classification, new_to_text_classification,\n\tquestion_answering, text_classification_to_question_answering,\n\tsentiment_analysis, question_answering_to_sentiment_analysis,\n\tdatetime({epochMillis: n.timestamp_ne*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Named_Entity_Recognizer'],\n\t\t{named_entity: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], when: processing_time}\n\t) YIELD node AS named_entity_recognition\n\tCALL apoc.create.vRelationship(\n\t\tsentiment_analysis, 'Named_Entity_Recognizing', {}, named_entity_recognition\n\t) YIELD rel AS sentiment_analysis_to_named_entity_recognition\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_question_answering,\n\tquestion_answering, question_answering_to_sentiment_analysis,\n\tnamed_entity_recognition, sentiment_analysis_to_named_entity_recognition,\t\n\tdatetime({epochMillis: n.timestamp_sm*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Summarization'],\n\t\t{summary_text: n.summary_text, when: processing_time}\n\t) YIELD node AS summarization\n\tCALL apoc.create.vRelationship(\n\t\tnamed_entity_recognition, 'Summarizing', {}, summarization\n\t) YIELD rel AS named_entity_recognition_to_summarization\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_question_answering,\n\tquestion_answering, question_answering_to_sentiment_analysis,\n\tnamed_entity_recognition, sentiment_analysis_to_named_entity_recognition,\t\n\tsummarization, named_entity_recognition_to_summarization,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tdatetime({epochMillis: n.timestamp_nj}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['Neo4j','Merge_Results'],\n\t\t{label : classification_label, movie: n.mentioned_movie, sentiment: ROUND(n.sentiment_score*1000)/1000, \n\t\tnamed_entities: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], summary_text: n.summary_text, \n\t\twhen: processing_time}\n\t) YIELD node AS neo4j\n\tCALL apoc.create.vRelationship(\n\t\tsummarization, 'Ingest_into_Neo4j', {}, neo4j\n\t) YIELD rel AS summarization_to_neo4j\n\nRETURN news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_question_answering,\n\tquestion_answering, question_answering_to_sentiment_analysis,\n\tnamed_entity_recognition, sentiment_analysis_to_named_entity_recognition,\t\n\tsummarization, named_entity_recognition_to_summarization,\n\tneo4j, summarization_to_neo4j;",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "graph",
          "selection": {
            "News": "name",
            "NLP_Task": "label",
            "Text_Classification": "label",
            "Sentiment_Analysis": "(label)",
            "Question_Answering": "(label)",
            "Named_Entity_Recognizer": "(label)",
            "Summarization": "(label)",
            "Neo4j": "movie",
            "Merge_Results": "label"
          },
          "settings": {
            "nodePositions": {},
            "frozen": false
          },
          "refreshRate": 60
        }
      ]
    },
    {
      "title": "Full Data Lineage",
      "reports": [
        {
          "title": "Full graph",
          "query": "MATCH (n:MovieNews) \n\tWHERE n.timestamp_sm IS NOT NULL\n\nWITH n, \n\tdatetime({epochMillis: n.timestamp_tc*1000}) AS processing_time,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tROUND((apoc.convert.fromJsonList(n.news_label_list)[0]['score'])*1000)/1000 AS classification_score\n\tCALL apoc.create.vNode(\n\t\t['News'], {name: n.title, time: n.pub_date}\n\t) YIELD node AS news\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Text_Classification'], \n\t\t{label: classification_label, score: classification_score, when: processing_time}\n\t) YIELD node AS text_classification\n\tCALL apoc.create.vRelationship(\n\t\tnews, 'Text_Classifying', {}, text_classification\n\t) YIELD rel AS new_to_text_classification\n\t\nWITH n, news, text_classification, new_to_text_classification,\n\tdatetime({epochMillis: n.timestamp_qa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Question_Answering'],\n\t\t{movie: n.mentioned_movie, score: ROUND(n.mentioned_score*1000)/1000, when: processing_time}\n\t) YIELD node AS question_answering\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Question_Answering', {}, question_answering\n\t) YIELD rel AS text_classification_to_question_answering\n\t\nWITH n, news, text_classification, new_to_text_classification,\n\tquestion_answering, text_classification_to_question_answering,\n\tdatetime({epochMillis: n.timestamp_sa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Sentiment_Analysis'],\n\t\t{score: ROUND(n.sentiment_score*1000)/1000, when: processing_time}\n\t) YIELD node AS sentiment_analysis\n\tCALL apoc.create.vRelationship(\n\t\tquestion_answering, 'Sentiment_Analysis', {}, sentiment_analysis\n\t) YIELD rel AS question_answering_to_sentiment_analysis\n\nWITH n, news, text_classification, new_to_text_classification,\n\tquestion_answering, text_classification_to_question_answering,\n\tsentiment_analysis, question_answering_to_sentiment_analysis,\n\tdatetime({epochMillis: n.timestamp_ne*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Named_Entity_Recognizer'],\n\t\t{named_entity: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], when: processing_time}\n\t) YIELD node AS named_entity_recognition\n\tCALL apoc.create.vRelationship(\n\t\tsentiment_analysis, 'Named_Entity_Recognizing', {}, named_entity_recognition\n\t) YIELD rel AS sentiment_analysis_to_named_entity_recognition\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_question_answering,\n\tquestion_answering, question_answering_to_sentiment_analysis,\n\tnamed_entity_recognition, sentiment_analysis_to_named_entity_recognition,\t\n\tdatetime({epochMillis: n.timestamp_sm*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Summarization'],\n\t\t{summary_text: n.summary_text, when: processing_time}\n\t) YIELD node AS summarization\n\tCALL apoc.create.vRelationship(\n\t\tnamed_entity_recognition, 'Summarizing', {}, summarization\n\t) YIELD rel AS named_entity_recognition_to_summarization\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_question_answering,\n\tquestion_answering, question_answering_to_sentiment_analysis,\n\tnamed_entity_recognition, sentiment_analysis_to_named_entity_recognition,\t\n\tsummarization, named_entity_recognition_to_summarization,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tdatetime({epochMillis: n.timestamp_nj}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['Neo4j','Merge_Results'],\n\t\t{label : classification_label, movie: n.mentioned_movie, sentiment: ROUND(n.sentiment_score*1000)/1000, \n\t\tnamed_entities: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], summary_text: n.summary_text, \n\t\twhen: processing_time}\n\t) YIELD node AS neo4j\n\tCALL apoc.create.vRelationship(\n\t\tsummarization, 'Ingest_into_Neo4j', {}, neo4j\n\t) YIELD rel AS summarization_to_neo4j\n\nRETURN news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_question_answering,\n\tquestion_answering, question_answering_to_sentiment_analysis,\n\tnamed_entity_recognition, sentiment_analysis_to_named_entity_recognition,\t\n\tsummarization, named_entity_recognition_to_summarization,\n\tneo4j, summarization_to_neo4j;",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "graph",
          "selection": {
            "News": "name",
            "NLP_Task": "label",
            "Text_Classification": "label",
            "Sentiment_Analysis": "(label)",
            "Question_Answering": "(label)",
            "Named_Entity_Recognizer": "(label)",
            "Summarization": "(label)",
            "Neo4j": "label",
            "Merge_Results": "label"
          },
          "settings": {
            "nodePositions": {}
          },
          "refreshRate": 60
        }
      ]
    }
  ],
  "parameters": {},
  "extensions": {}
}