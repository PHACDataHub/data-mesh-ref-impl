{
    "name": "extracted_doc_entities_sink_connector",
    "config": {
        "_comment": "Sink configuration for Disease Ontology Classes",
        "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://schema-registry:8081",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter.schema.registry.url": "http://schema-registry:8081",
        "errors.retry.timeout": "-1",
        "errors.retry.delay.max.ms": "1000",
        "errors.tolerance": "all",
        "errors.log.enable": true,
        "errors.log.include.messages": true,
        "neo4j.server.uri": "bolt://neo4j:7687",
        "neo4j.authentication.basic.username": "neo4j",
        "neo4j.authentication.basic.password": "phac@2023",
        "neo4j.encryption.enabled": false,
        "topics": "extracted-doc-entities",
        "neo4j.topic.cypher.extracted-doc-entities": "MATCH (c:Resource {uri: event.url}) WITH c, event UNWIND apoc.convert.fromJsonList(event.ets) AS entity CALL apoc.merge.node([entity[2]], {text: entity[0]}) YIELD node WITH c, event, entity, node CALL apoc.create.addLabels(node, ['NE']) YIELD node AS ne WITH c, event, entity, ne MERGE (c)-[r:NE]->(ne) SET r.tf = entity[1] WITH c, event, entity, ne FOREACH ( word IN entity[3] |  MERGE (w:W {text: word}) MERGE (ne)-[:HAS]->(w)) WITH c, event UNWIND apoc.convert.fromJsonList(event.kps) AS phrase MERGE (kp:KP {text: phrase[0]}) WITH c, event, phrase, kp MERGE (c)-[r:KP]->(kp) SET r.tf = phrase[1] WITH c, event, phrase, kp FOREACH ( word IN phrase[2] |  MERGE (w:W {text: word}) MERGE (kp)-[:HAS]->(w))"
    }
}