{
  "title": "Movie Recommendations",
  "version": "2.2",
  "settings": {
    "pagenumber": 0,
    "editable": false,
    "fullscreenEnabled": false,
    "parameters": {}
  },
  "pages": [
    {
      "title": "All news from Screenrant",
      "reports": [
        {
          "title": "All news",
          "query": "MATCH (n:MovieNews) \n    WHERE apoc.convert.fromJsonList(n.news_label_list)[0]['name'] = 'movie'\nRETURN n.link, n.title, n.description, n.content;\n\n",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "nodePositions": {}
          }
        }
      ]
    },
    {
      "title": "News about movies",
      "reports": [
        {
          "title": "All unclassified news items",
          "query": "MATCH (n:MovieNews) \n    WHERE apoc.convert.fromJsonList(n.news_label_list)[0]['name'] = 'movie'\nRETURN n.mentioned_movie, n.sentiment_score, n.summary_text;",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "allowDownload": true,
            "columnWidths": "[30,15,110]",
            "description": "The list of current Screenrant news items from RSS feed"
          }
        }
      ]
    },
    {
      "title": "Recommendable movies",
      "reports": [
        {
          "title": "List of current recommendable movies",
          "query": "MATCH (n:MovieNews) \n    WHERE apoc.convert.fromJsonList(n.news_label_list)[0]['name'] = 'movie'\nWITH n, REDUCE (movie_title=n.mentioned_movie, e IN apoc.convert.fromJsonList(n.named_entities_json) | CASE (e.word CONTAINS n.mentioned_movie) WHEN true THEN e.word ELSE movie_title END) AS movie_title\nWITH n, TRIM(movie_title) AS movie_title\n    MATCH (m:Title {primaryTitle: movie_title})\n        WHERE m.averageRating IS NOT NULL\nWITH movie_title, COLLECT(m) AS mc\nWITH movie_title, REDUCE(m=HEAD(mc), e IN TAIL(mc) | CASE e.averageRating > m.averageRating WHEN true THEN e ELSE m END) AS m\nWITH movie_title, m\n\tOPTIONAL MATCH (m)-[r:CREW_IN {category: 'director'}]-(p:Name)\nWITH movie_title, m, COLLECT(p.primaryName) AS directors\n\tOPTIONAL MATCH (m)-[r:CREW_IN {category: 'producer'}]-(p:Name)\nWITH movie_title, m, directors, COLLECT(p.primaryName) AS producers\n\tOPTIONAL MATCH (m)-[r:CREW_IN {category: 'writer'}]-(p:Name)\nWITH movie_title, m, directors, producers, COLLECT(p.primaryName) AS writers\n\tOPTIONAL MATCH (m)-[r:CREW_IN]-(p:Name)\n    \tWHERE r.category IN ['actor', 'actress']\nWITH movie_title, m, directors, producers, writers, COLLECT(p.primaryName) AS actors\nRETURN m.primaryTitle AS title, m.startYear AS year, CASE m.runtimeMinutes <> '\\N' WHEN true THEN m.runtimeMinutes ELSE '-' END AS min, m.averageRating AS rating, m.numVotes AS votes, directors, producers, writers, actors ORDER BY rating DESC, votes DESC",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "nodePositions": {},
            "allowDownload": true,
            "columnWidths": "[35,5,5,5,10,30,30,30,30]"
          }
        }
      ]
    },
    {
      "title": "Movies & Casts",
      "reports": [
        {
          "title": "Recommendable movies and their casts",
          "query": "MATCH (n:MovieNews) \n    WHERE apoc.convert.fromJsonList(n.news_label_list)[0]['name'] = 'movie'\nWITH n, REDUCE (movie_title=n.mentioned_movie, e IN apoc.convert.fromJsonList(n.named_entities_json) | CASE (e.word CONTAINS n.mentioned_movie) WHEN true THEN e.word ELSE movie_title END) AS movie_title\nWITH n, TRIM(movie_title) AS movie_title\n    MATCH (m:Title {primaryTitle: movie_title})\n        WHERE m.averageRating IS NOT NULL\nWITH movie_title, COLLECT(m) AS mc\nWITH movie_title, REDUCE(m=HEAD(mc), e IN TAIL(mc) | CASE e.averageRating > m.averageRating WHEN true THEN e ELSE m END) AS m\nWITH m\n\tOPTIONAL MATCH (m)-[r:CREW_IN]-(p)\nRETURN m, r, p",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "graph",
          "selection": {
            "Title": "primaryTitle",
            "Name": "primaryName"
          },
          "settings": {
            "nodePositions": {},
            "defaultNodeSize": 5,
            "layout": "force-directed"
          }
        }
      ]
    },
    {
      "title": "Data Lineage",
      "reports": [
        {
          "title": "Single item",
          "query": "MATCH (n:MovieNews) \n\nWITH n LIMIT 1\n\nWITH n, \n\tdatetime({epochMillis: (n.timestamp_sa - 1)*1000}) AS processing_time,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tROUND((apoc.convert.fromJsonList(n.news_label_list)[0]['score'])*1000)/1000 AS classification_score\n\tCALL apoc.create.vNode(\n\t\t['News'], {name: n.title, time: n.pub_date}\n\t) YIELD node AS news\n\tCALL apoc.create.vNode(\n\t\t['Text_Classification'], \n\t\t{label: classification_label, score: classification_score, when: processing_time}\n\t) YIELD node AS text_classification\n\tCALL apoc.create.vRelationship(\n\t\tnews, 'Text_Classifying', {}, text_classification\n\t) YIELD rel AS new_to_text_classification\n\t\nWITH n, news, text_classification, new_to_text_classification,\n\tdatetime({epochMillis: n.timestamp_sa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['Sentiment_Analysis'],\n\t\t{score: ROUND(n.sentiment_score*1000)/1000, when: processing_time}\n\t) YIELD node AS sentiment_analysis\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Sentiment_Analysis', {}, sentiment_analysis\n\t) YIELD rel AS text_classification_to_sentiment_analysis\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tdatetime({epochMillis: n.timestamp_qa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['Question_Answering'],\n\t\t{movie: n.mentioned_movie, score: ROUND(n.mentioned_score*1000)/1000, when: processing_time}\n\t) YIELD node AS question_answering\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Question_Answering', {}, question_answering\n\t) YIELD rel AS text_classification_to_question_answering\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tdatetime({epochMillis: n.timestamp_ne*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['Named_Entity_Recognizer'],\n\t\t{named_entity: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], when: processing_time}\n\t) YIELD node AS named_entity_recognition\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Named_Entity_Recognizing', {}, named_entity_recognition\n\t) YIELD rel AS text_classification_to_named_entity_recognition\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tnamed_entity_recognition, text_classification_to_named_entity_recognition,\t\n\tdatetime({epochMillis: n.timestamp_sm*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['Summarization'],\n\t\t{summary_text: n.summary_text, when: processing_time}\n\t) YIELD node AS summarization\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Summarizing', {}, summarization\n\t) YIELD rel AS text_classification_to_summarization\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tnamed_entity_recognition, text_classification_to_named_entity_recognition,\t\n\tsummarization, text_classification_to_summarization,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tdatetime({epochMillis: n.timestamp_nj}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['Neo4j'],\n\t\t{label : classification_label, movie: n.mentioned_movie, sentiment: ROUND(n.sentiment_score*1000)/1000, \n\t\tnamed_entities: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], summary_text: n.summary_text, \n\t\twhen: processing_time}\n\t) YIELD node AS neo4j\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Merge', {}, neo4j\n\t) YIELD rel AS text_classification_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tsentiment_analysis, 'Merge', {}, neo4j\n\t) YIELD rel AS sentiment_analysis_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tquestion_answering, 'Merge', {}, neo4j\n\t) YIELD rel AS question_answering_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tnamed_entity_recognition, 'Merge', {}, neo4j\n\t) YIELD rel AS named_entity_recognition_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tsummarization, 'Merge', {}, neo4j\n\t) YIELD rel AS summarization_to_neo4j\n\nRETURN news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tnamed_entity_recognition, text_classification_to_named_entity_recognition,\n\tsummarization, text_classification_to_summarization,\n\tneo4j, text_classification_to_neo4j, sentiment_analysis_to_neo4j,\n\tquestion_answering_to_neo4j, named_entity_recognition_to_neo4j,\n\tsummarization_to_neo4j;",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "graph",
          "selection": {
            "News": "(label)",
            "Text_Classification": "when",
            "Sentiment_Analysis": "when",
            "Question_Answering": "when",
            "Named_Entity_Recognizer": "when",
            "Summarization": "when",
            "Neo4j": "when"
          },
          "settings": {
            "nodePositions": {}
          }
        }
      ]
    },
    {
      "title": "Full Data Lineage",
      "reports": [
        {
          "title": "Full graph",
          "query": "MATCH (n:MovieNews) \n\nWITH n, \n\tdatetime({epochMillis: (n.timestamp_sa - 1)*1000}) AS processing_time,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tROUND((apoc.convert.fromJsonList(n.news_label_list)[0]['score'])*1000)/1000 AS classification_score\n\tCALL apoc.create.vNode(\n\t\t['News'], {name: n.title, time: n.pub_date}\n\t) YIELD node AS news\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Text_Classification'], \n\t\t{label: classification_label, score: classification_score, when: processing_time}\n\t) YIELD node AS text_classification\n\tCALL apoc.create.vRelationship(\n\t\tnews, 'Text_Classifying', {}, text_classification\n\t) YIELD rel AS new_to_text_classification\n\t\nWITH n, news, text_classification, new_to_text_classification,\n\tdatetime({epochMillis: n.timestamp_sa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Sentiment_Analysis'],\n\t\t{score: ROUND(n.sentiment_score*1000)/1000, when: processing_time}\n\t) YIELD node AS sentiment_analysis\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Sentiment_Analysis', {}, sentiment_analysis\n\t) YIELD rel AS text_classification_to_sentiment_analysis\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tdatetime({epochMillis: n.timestamp_qa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Question_Answering'],\n\t\t{movie: n.mentioned_movie, score: ROUND(n.mentioned_score*1000)/1000, when: processing_time}\n\t) YIELD node AS question_answering\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Question_Answering', {}, question_answering\n\t) YIELD rel AS text_classification_to_question_answering\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tdatetime({epochMillis: n.timestamp_ne*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Named_Entity_Recognizer'],\n\t\t{named_entity: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], when: processing_time}\n\t) YIELD node AS named_entity_recognition\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Named_Entity_Recognizing', {}, named_entity_recognition\n\t) YIELD rel AS text_classification_to_named_entity_recognition\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tnamed_entity_recognition, text_classification_to_named_entity_recognition,\t\n\tdatetime({epochMillis: n.timestamp_sm*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Summarization'],\n\t\t{summary_text: n.summary_text, when: processing_time}\n\t) YIELD node AS summarization\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Summarizing', {}, summarization\n\t) YIELD rel AS text_classification_to_summarization\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tnamed_entity_recognition, text_classification_to_named_entity_recognition,\t\n\tsummarization, text_classification_to_summarization,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tdatetime({epochMillis: n.timestamp_nj}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['Neo4j','Merge_Results'],\n\t\t{label : classification_label, movie: n.mentioned_movie, sentiment: ROUND(n.sentiment_score*1000)/1000, \n\t\tnamed_entities: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], summary_text: n.summary_text, \n\t\twhen: processing_time}\n\t) YIELD node AS neo4j\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Merge', {}, neo4j\n\t) YIELD rel AS text_classification_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tsentiment_analysis, 'Merge', {}, neo4j\n\t) YIELD rel AS sentiment_analysis_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tquestion_answering, 'Merge', {}, neo4j\n\t) YIELD rel AS question_answering_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tnamed_entity_recognition, 'Merge', {}, neo4j\n\t) YIELD rel AS named_entity_recognition_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tsummarization, 'Merge', {}, neo4j\n\t) YIELD rel AS summarization_to_neo4j\n\nRETURN news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tnamed_entity_recognition, text_classification_to_named_entity_recognition,\n\tsummarization, text_classification_to_summarization,\n\tneo4j, text_classification_to_neo4j, sentiment_analysis_to_neo4j,\n\tquestion_answering_to_neo4j, named_entity_recognition_to_neo4j,\n\tsummarization_to_neo4j;\n\n\n",
          "width": 12,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "graph",
          "selection": {
            "News": "name",
            "NLP_Task": "label",
            "Text_Classification": "label",
            "Sentiment_Analysis": "(label)",
            "Question_Answering": "(label)",
            "Named_Entity_Recognizer": "(label)",
            "Summarization": "(label)",
            "Neo4j": "label",
            "Merge_Results": "label"
          },
          "settings": {
            "nodePositions": {}
          }
        }
      ]
    },
    {
      "title": "Avatar: The Way of Water",
      "reports": [
        {
          "title": "Processing in action - actual workflow",
          "query": "MATCH (n:MovieNews {link: 'https://screenrant.com/avatar-way-water-box-office-fall-drop-details/'}) \n\nWITH n, \n\tdatetime({epochMillis: (n.timestamp_sa - 1)*1000}) AS processing_time,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tROUND((apoc.convert.fromJsonList(n.news_label_list)[0]['score'])*1000)/1000 AS classification_score\n\tCALL apoc.create.vNode(\n\t\t['News'], {name: n.title, time: n.pub_date}\n\t) YIELD node AS news\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Text_Classification'], \n\t\t{label: classification_label, score: classification_score, when: processing_time}\n\t) YIELD node AS text_classification\n\tCALL apoc.create.vRelationship(\n\t\tnews, 'Text_Classifying', {}, text_classification\n\t) YIELD rel AS new_to_text_classification\n\t\nWITH n, news, text_classification, new_to_text_classification,\n\tdatetime({epochMillis: n.timestamp_sa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Sentiment_Analysis'],\n\t\t{score: ROUND(n.sentiment_score*1000)/1000, when: processing_time}\n\t) YIELD node AS sentiment_analysis\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Sentiment_Analysis', {}, sentiment_analysis\n\t) YIELD rel AS text_classification_to_sentiment_analysis\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tdatetime({epochMillis: n.timestamp_qa*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Question_Answering'],\n\t\t{movie: n.mentioned_movie, score: ROUND(n.mentioned_score*1000)/1000, when: processing_time}\n\t) YIELD node AS question_answering\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Question_Answering', {}, question_answering\n\t) YIELD rel AS text_classification_to_question_answering\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tdatetime({epochMillis: n.timestamp_ne*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Named_Entity_Recognizer'],\n\t\t{named_entity: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], when: processing_time}\n\t) YIELD node AS named_entity_recognition\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Named_Entity_Recognizing', {}, named_entity_recognition\n\t) YIELD rel AS text_classification_to_named_entity_recognition\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tnamed_entity_recognition, text_classification_to_named_entity_recognition,\t\n\tdatetime({epochMillis: n.timestamp_sm*1000}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['NLP_Task','Summarization'],\n\t\t{summary_text: n.summary_text, when: processing_time}\n\t) YIELD node AS summarization\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Summarizing', {}, summarization\n\t) YIELD rel AS text_classification_to_summarization\n\nWITH n, news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tnamed_entity_recognition, text_classification_to_named_entity_recognition,\t\n\tsummarization, text_classification_to_summarization,\n\tapoc.convert.fromJsonList(n.news_label_list)[0]['name'] AS classification_label,\n\tdatetime({epochMillis: n.timestamp_nj}) AS processing_time\n\tCALL apoc.create.vNode(\n\t\t['Neo4j','Merge_Results'],\n\t\t{label : classification_label, movie: n.mentioned_movie, sentiment: ROUND(n.sentiment_score*1000)/1000, \n\t\tnamed_entities: [e IN apoc.convert.fromJsonList(n.named_entities_json) | e.word], summary_text: n.summary_text, \n\t\twhen: processing_time}\n\t) YIELD node AS neo4j\n\tCALL apoc.create.vRelationship(\n\t\ttext_classification, 'Merge', {}, neo4j\n\t) YIELD rel AS text_classification_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tsentiment_analysis, 'Merge', {}, neo4j\n\t) YIELD rel AS sentiment_analysis_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tquestion_answering, 'Merge', {}, neo4j\n\t) YIELD rel AS question_answering_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tnamed_entity_recognition, 'Merge', {}, neo4j\n\t) YIELD rel AS named_entity_recognition_to_neo4j\n\tCALL apoc.create.vRelationship(\n\t\tsummarization, 'Merge', {}, neo4j\n\t) YIELD rel AS summarization_to_neo4j\n\nRETURN news, text_classification, new_to_text_classification,\n\tsentiment_analysis, text_classification_to_sentiment_analysis,\n\tquestion_answering, text_classification_to_question_answering,\n\tnamed_entity_recognition, text_classification_to_named_entity_recognition,\n\tsummarization, text_classification_to_summarization,\n\tneo4j, text_classification_to_neo4j, sentiment_analysis_to_neo4j,\n\tquestion_answering_to_neo4j, named_entity_recognition_to_neo4j,\n\tsummarization_to_neo4j;\n",
          "width": 10,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "graph",
          "selection": {
            "News": "name",
            "NLP_Task": "label",
            "Text_Classification": "label",
            "Sentiment_Analysis": "(label)",
            "Question_Answering": "(label)",
            "Named_Entity_Recognizer": "(label)",
            "Summarization": "(label)",
            "Neo4j": "label",
            "Merge_Results": "label"
          },
          "settings": {
            "nodePositions": {}
          }
        }
      ]
    }
  ],
  "parameters": {},
  "extensions": {}
}